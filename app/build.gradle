apply plugin: 'com.android.application'


android {
    compileSdkVersion Integer.parseInt(rootProject.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion rootProject.ANDROID_BUILD_TOOLS_VERSION

    /**
     * 设置一些默认属性，其可用属性是buildTypes和ProductFlavors之和
     */
    defaultConfig {

        applicationId rootProject.PACKAGE_NAME
        minSdkVersion Integer.parseInt(rootProject.ANDROID_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(rootProject.ANDROID_TARGET_SDK_VERSION)

        versionCode rootProject.VERSION_CODE as int
        versionName rootProject.VERSION_NAME

        // dex突破65535的限制
        multiDexEnabled true

        flavorDimensions "dimension"//
        // 声明需要使用注解功能
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }

    }

    signingConfigs {
        release {
            storeFile file("adorkable.jks")
            storePassword "adorkable"
            keyAlias "adorkable_alias"
            keyPassword "adorkable"
        }
        debug {

        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            resValue "string", "app_name", "古文词典-测试版"
            debuggable true
            // 自定义是否显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            signingConfig signingConfigs.debug
        }
        release {
            //生成的APK是否支持调试本地代码
            jniDebuggable false
            //是否可调试
            debuggable false
            //启用混淆
            minifyEnabled true
            //对APK包执行ZIP对齐优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名配置
            signingConfig signingConfigs.release
            resValue "string", "app_name", "古文词典"

            //编译生成多个版本
            applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    if (outputFileName.endsWith('.apk')) {
                        //这里使用之前定义apk文件名称
                        outputFileName = "dict_${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                    }
                }
            }
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency { details ->
            def requested = details.requested
            if (requested.group == 'com.android.support') {
                if (!requested.name.startsWith("multidex")) {
                    details.useVersion "${project.ANDROID_SUPPORT_VERSION}"
                }
            }
        }
    }

    /**
     * 多渠道
     */
    productFlavors {

        /**
         * 每个flavor 可以覆盖defaultConfig中的所有的值
         */

        febsky {
            dimension "dimension"
            manifestPlaceholders = [CHANNEL_NAME: "FEB_SKY"]
        }

        pugongying {
            dimension "dimension"
            manifestPlaceholders = [CHANNEL_NAME: "PU_GONG_YING"]
        }

        qihu360 {
            dimension "dimension"
            manifestPlaceholders = [CHANNEL_NAME: "QI_HU_360"]
        }

        googleplay {
            dimension "dimension"
            manifestPlaceholders = [CHANNEL_NAME: "GOOGLE_PLAY"]
        }

        baidu {
            dimension "dimension"
            manifestPlaceholders = [CHANNEL_NAME: "BAI_DU"]
        }

        anzhi {
            dimension "dimension"
            manifestPlaceholders = [CHANNEL_NAME: "AN_ZHI"]
        }

        xiaomi {
            dimension "dimension"
            manifestPlaceholders = [CHANNEL_NAME: "XIAO_MI"]
        }


        /*aliapp {
            dimension "dimension"
            manifestPlaceholders = [CHANNEL_NAME: "ALI_APP"]
        }*/
    }

    //Java的配置
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dexOptions {
        preDexLibraries = false
        jumboMode = false
    }

    aaptOptions {
        noCompress 'foo', 'bar'
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude '.readme'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'TypographyFractions', 'TypographyQuotes'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:23.2.1'
    implementation 'com.android.support:design:23.2.1'
    implementation 'com.android.support:cardview-v7:23.2.1'

    implementation 'com.j256.ormlite:ormlite-android:5.0'
    implementation 'com.j256.ormlite:ormlite-core:5.0'

    implementation 'com.mcxiaoke.volley:library:1.0.19'
    implementation 'com.google.code.gson:gson:2.4'
    implementation 'com.orhanobut:logger:1.3'
    implementation('com.makeramen:roundedimageview:2.1.2') {
        transitive = true
    }
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.jakewharton:butterknife:7.0.1'
    implementation files('libs/libammsdk.jar')
}
